{"version":3,"sources":["features/auth/authSlice.ts","features/graph/Filter.tsx","features/graph/Chart.tsx","features/auth/Login.tsx","features/auth/Logout.tsx","App.tsx","reportWebVitals.js","store.js","index.js"],"names":["initialToken","localStorage","getItem","initialState","loggedIn","token","authSlice","createSlice","name","reducers","login","state","action","payload","setItem","logout","removeItem","actions","Filter","onSensorChange","useState","items","setItems","sensor","setSensor","dispatch","useDispatch","auth","useSelector","useEffect","headers","Headers","set","fetch","method","then","result","ok","json","Promise","reject","Error","statusText","uuid","catch","error","console","log","options","map","MenuItem","value","title","Select","onChange","event","target","Chart","props","fetchData","url","id","setInterval","clearInterval","data","datasets","label","o","x","insert_timestamp","y","co2","fill","backgroundColor","borderColor","temperature","humidity","className","type","animation","scales","time","unit","displayFormats","hour","day","suggestedMin","Login","username","setUsername","password","setPassword","onSubmit","preventDefault","btoa","TextField","e","Button","Logout","to","App","prefersDarkMode","useMediaQuery","theme","React","useMemo","createMuiTheme","palette","ThemeProvider","CssBaseline","path","component","Link","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","authReducer","ReactDOM","render","StrictMode","store","document","getElementById"],"mappings":"mWAEMA,EAAeC,aAAaC,QAAQ,SAEpCC,EAAe,CACnBC,WAAYJ,EACZK,MAAOL,GAGHM,EAAYC,YAAY,CAC5BC,KAAM,OACNL,eACAM,SAAU,CACRC,MADQ,SACFC,EAAOC,GACXD,EAAMP,UAAW,EACjBO,EAAMN,MAAQO,EAAOC,QACrBZ,aAAaa,QAAQ,QAASF,EAAOC,UAEvCE,OANQ,SAMDJ,GACLA,EAAMP,UAAW,EACjBO,EAAMN,MAAQ,GACdJ,aAAae,WAAW,aAKvB,EAA0BV,EAAUW,QAA5BP,EAAR,EAAQA,MAAOK,EAAf,EAAeA,OAEPT,IAAf,Q,yBChBaY,EAAS,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,eAEvB,EAA0BC,mBAAmB,IAA7C,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEMC,EAAWC,cACXC,EAAOC,aAAkC,SAACjB,GAAD,OAAWA,EAAMgB,QAEhEE,qBAAU,WACR,GAAIF,EAAKvB,SAAU,CACjB,IACM0B,EAAU,IAAIC,QACpBD,EAAQE,IAAI,gBAAZ,gBAAsCL,EAAKtB,QAC3C4B,MAHS,8IAGE,CACTC,OAAQ,MACRJ,YAECK,MAAK,SAAAC,GACJ,OAAIA,EAAOC,GACFD,EAAOE,QAEhBb,EACEV,KAEKwB,QAAQC,OAAO,IAAIC,MAAML,EAAOM,iBAExCP,MAAK,SAACC,GAAY,IAAD,IACVb,EAAM,oBAAGa,EAAOf,MAAM,UAAhB,aAAG,EAAiBsB,YAApB,QAA4B,GACxCrB,EAASc,EAAOf,OAChBF,EAAeI,GACfC,EAAUD,MAEXqB,OAAM,SAACC,GACNC,QAAQC,IAAIF,GACZ1B,EAAe,IACfK,EAAU,YAGdF,EAAS,MAEV,CAACG,EAAUN,EAAgBQ,IAE9B,IAMMqB,EAAU3B,EAAM4B,KAAI,SAAA1B,GAAM,OAAI,cAAC2B,EAAA,EAAD,CAA4BC,MAAO5B,EAAOoB,KAA1C,SAAiDpB,EAAO6B,OAAzC7B,EAAOoB,SAC1D,OACE,cAACU,EAAA,EAAD,CAAQF,MAAO5B,EAAQ+B,SARJ,SAACC,GACpB,IAAMhC,EAASgC,EAAMC,OAAOL,MAC5BhC,EAAeI,GACfC,EAAUD,IAKV,SACGyB,K,SClDMS,G,OAAQ,SAACC,GAEpB,MAA0BtC,mBAAwB,IAAlD,mBAAOC,EAAP,KAAcC,EAAd,KACMK,EAAOC,aAAkC,SAACjB,GAAD,OAAWA,EAAMgB,QAC1DF,EAAWC,cAEjBG,qBAAU,WACR,IAAM8B,EAAY,WAChB,GAAIhC,EAAKvB,UAAYsD,EAAMnC,OAAQ,CACjC,IAAMqC,EAAG,qJAAiJF,EAAMnC,OAAvJ,8CACHO,EAAU,IAAIC,QACpBD,EAAQE,IAAI,gBAAZ,gBAAsCL,EAAKtB,QAC3C4B,MAAM2B,EAAK,CACT1B,OAAQ,MACRJ,YAECK,MAAK,SAAAC,GACJ,OAAIA,EAAOC,GACFD,EAAOE,QAEhBb,EACEV,KAEKwB,QAAQC,OAAO,IAAIC,MAAML,EAAOM,iBAExCP,MAAK,SAACC,GACLd,EAASc,EAAOf,UAEjBuB,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAIF,WAEhCvB,EAAS,KAIbqC,IAEA,IAAME,EAAKC,aAAY,WACrBH,MACC,KACH,OAAO,kBAAMI,cAAcF,MAC1B,CAACpC,EAAUiC,EAAO/B,IAErB,IAAMqC,EAAO,CACXC,SAAU,CACR,CACEC,MAAO,MACPF,KAAM3C,EAAM4B,KAAI,SAAAkB,GAAC,MAAK,CACpBC,EAAGD,EAAEE,iBACLC,EAAGH,EAAEI,QAEPC,MAAM,EACNC,gBAAiB,oBACjBC,YAAa,2BAEf,CACER,MAAO,cACPF,KAAM3C,EAAM4B,KAAI,SAAAkB,GAAC,MAAK,CACpBC,EAAGD,EAAEE,iBACLC,EAAGH,EAAEQ,gBAEPH,MAAM,EACNC,gBAAiB,oBACjBC,YAAa,2BAEf,CACER,MAAO,WACPF,KAAM3C,EAAM4B,KAAI,SAAAkB,GAAC,MAAK,CACpBC,EAAGD,EAAEE,iBACLC,EAAGH,EAAES,aAEPJ,MAAM,EACNC,gBAAiB,oBACjBC,YAAa,6BAwBnB,OACE,qBAAKG,UAAU,QAAf,SACE,cAAC,IAAD,CAAgBC,KAAK,OAAOd,KAAMA,EAAMhB,QArB5B,CACd+B,WAAW,EACXC,OAAQ,CACNZ,EAAG,CACDU,KAAM,OACNG,KAAM,CACJC,KAAM,OACNC,eAAgB,CACdC,KAAM,QACNC,IAAK,gBAIXf,EAAG,CACDgB,aAAc,W,kBCjGTC,EAAQ,WAEnB,MAAgCnE,mBAAS,IAAzC,mBAAOoE,EAAP,KAAiBC,EAAjB,KACA,EAAgCrE,mBAAS,IAAzC,mBAAOsE,EAAP,KAAiBC,EAAjB,KACMlE,EAAWC,cASjB,OACE,qBAAKmD,UAAU,gBAAf,SACE,uBAAMe,SATW,SAACrC,GACpBA,EAAMsC,iBACNpE,EACEf,EAAMoF,KAAK,GAAD,OAAIN,EAAJ,YAAgBE,OAM1B,UACE,cAACK,EAAA,EAAD,CAAW7B,MAAM,WAAWZ,SAAU,SAAC0C,GAAD,OAAOP,EAAYO,EAAExC,OAAOL,UAClE,cAAC4C,EAAA,EAAD,CAAWjB,KAAK,WAAWZ,MAAM,WAAWZ,SAAU,SAAC0C,GAAD,OAAOL,EAAYK,EAAExC,OAAOL,UAClF,cAAC8C,EAAA,EAAD,CAAQnB,KAAK,SAAb,yBCpBKoB,EAAS,WAMpB,OAJiBxE,aAEjBD,CAASV,KAGP,cAAC,IAAD,CAAUoF,GAAG,OCoDFC,MA/Cf,WAEE,MAA4BhF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KAEMG,EAAOC,aAAkC,SAACjB,GAAD,OAAWA,EAAMgB,QAE1D0E,EAAkBC,YAAc,gCAEhCC,EAAQC,IAAMC,SAClB,kBACEC,YAAe,CACbC,QAAS,CACP7B,KAAMuB,EAAkB,OAAS,aAGvC,CAACA,IAIH,OAAK1E,EAAKvB,SAUR,eAACwG,EAAA,EAAD,CAAeL,MAAOA,EAAtB,UACE,cAACM,EAAA,EAAD,IACA,cAAC,IAAD,UACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOC,KAAK,UAAZ,SACE,cAAC,EAAD,MAEF,eAAC,IAAD,CAAOA,KAAK,IAAZ,UACE,cAAC,EAAD,CAAQ3F,eAAgBK,IACxB,cAACyE,EAAA,EAAD,CAAQc,UAAWC,IAAMb,GAAG,UAA5B,oBACA,cAAC,EAAD,CAAO5E,OAAQA,eAlBrB,eAACqF,EAAA,EAAD,CAAeL,MAAOA,EAAtB,UACE,cAACM,EAAA,EAAD,IACA,cAAC,EAAD,QC5BOI,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBhF,MAAK,YAAkD,IAA/CiF,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCHCO,cAAe,CAC5BC,QAAS,CACP/F,KAAMgG,KCGVC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BhB,M","file":"static/js/main.652171e8.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\n\nconst initialToken = localStorage.getItem('token');\n\nconst initialState = {\n  loggedIn: !!initialToken,\n  token: initialToken\n}\n\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    login(state, action) {\n      state.loggedIn = true;\n      state.token = action.payload;\n      localStorage.setItem('token', action.payload);\n    },\n    logout(state) {\n      state.loggedIn = false;\n      state.token = '';\n      localStorage.removeItem('token');\n    }\n  }\n});\n\nexport const { login, logout } = authSlice.actions;\n\nexport default authSlice.reducer","import React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { logout } from '../auth/authSlice';\nimport { Sensor } from '../../model/Sensor';\nimport { AuthState, RootState } from '../../model/State';\nimport { MenuItem, Select } from '@material-ui/core';\n\ntype Props = {\n  onSensorChange: (sensor: string) => void\n}\n\nexport const Filter = ({ onSensorChange }: Props) => {\n\n  const [items, setItems] = useState<Sensor[]>([]);\n  const [sensor, setSensor] = useState('');\n\n  const dispatch = useDispatch();\n  const auth = useSelector<RootState, AuthState>((state) => state.auth);\n\n  useEffect(() => {\n    if (auth.loggedIn) {\n      const url = `https://glusfqycvwrucp9-db202012181437.adb.eu-zurich-1.oraclecloudapps.com/ords/sensor_datalake/sens/sensors?q={\"$orderby\":{\"title\":\"asc\"}}`;\n      const headers = new Headers();\n      headers.set('Authorization', `Basic ${auth.token}`);\n      fetch(url, {\n        method: 'GET',\n        headers\n      })\n        .then(result => {\n          if (result.ok) {\n            return result.json();\n          }\n          dispatch(\n            logout()\n          );\n          return Promise.reject(new Error(result.statusText));\n        })\n        .then((result) => {\n          const sensor = result.items[0]?.uuid ?? '';\n          setItems(result.items);\n          onSensorChange(sensor);\n          setSensor(sensor);\n        })\n        .catch((error) => {\n          console.log(error);\n          onSensorChange('');\n          setSensor('');\n        });\n    } else {\n      setItems([]);\n    }\n  }, [dispatch, onSensorChange, auth]);\n\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    const sensor = event.target.value as string;\n    onSensorChange(sensor);\n    setSensor(sensor);\n  }\n\n  const options = items.map(sensor => <MenuItem key={sensor.uuid} value={sensor.uuid}>{sensor.title}</MenuItem>)\n  return (\n    <Select value={sensor} onChange={handleChange}>\n      {options}\n    </Select>\n  )\n}\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ChartComponent from 'react-chartjs-2';\nimport 'chartjs-adapter-moment';\n\nimport { logout } from '../auth/authSlice';\nimport { AuthState, RootState } from '../../model/State';\nimport { Measurement } from '../../model/Measurement';\n\ntype Props = {\n  sensor: string\n}\n\nexport const Chart = (props: Props) => {\n\n  const [items, setItems] = useState<Measurement[]>([]);\n  const auth = useSelector<RootState, AuthState>((state) => state.auth);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    const fetchData = () => {\n      if (auth.loggedIn && props.sensor) {\n        const url = `https://glusfqycvwrucp9-db202012181437.adb.eu-zurich-1.oraclecloudapps.com/ords/sensor_datalake/sens/measurements?q={\"sensor_uuid\":{\"$eq\":\"${props.sensor}\"},\"$orderby\":{\"insert_timestamp\":\"desc\"}}`;\n        const headers = new Headers();\n        headers.set('Authorization', `Basic ${auth.token}`);\n        fetch(url, {\n          method: 'GET',\n          headers\n        })\n          .then(result => {\n            if (result.ok) {\n              return result.json();\n            }\n            dispatch(\n              logout()\n            );\n            return Promise.reject(new Error(result.statusText));\n          })\n          .then((result) => {\n            setItems(result.items);\n          })\n          .catch((error) => console.log(error));\n      } else {\n        setItems([]);\n      }\n    }\n\n    fetchData();\n\n    const id = setInterval(() => {\n      fetchData();\n    }, 30000);\n    return () => clearInterval(id);\n  }, [dispatch, props, auth]);\n\n  const data = {\n    datasets: [\n      {\n        label: 'CO2',\n        data: items.map(o => ({\n          x: o.insert_timestamp,\n          y: o.co2\n        })),\n        fill: false,\n        backgroundColor: 'rgb(255, 99, 132)',\n        borderColor: 'rgba(255, 99, 132, 0.2)',\n      },\n      {\n        label: 'Temperature',\n        data: items.map(o => ({\n          x: o.insert_timestamp,\n          y: o.temperature\n        })),\n        fill: false,\n        backgroundColor: 'rgb(255, 159, 64)',\n        borderColor: 'rgba(255, 159, 64, 0.2)',\n      },\n      {\n        label: 'Humidity',\n        data: items.map(o => ({\n          x: o.insert_timestamp,\n          y: o.humidity\n        })),\n        fill: false,\n        backgroundColor: 'rgb(255, 205, 86)',\n        borderColor: 'rgba(255, 205, 86, 0.2)',\n      }\n    ]\n  };\n\n  const options = {\n    animation: false,\n    scales: {\n      x: {\n        type: 'time',\n        time: {\n          unit: 'hour',\n          displayFormats: {\n            hour: 'HH:mm',\n            day: 'DD.MM.YYYY'\n          }\n        }\n      },\n      y: {\n        suggestedMin: 0,\n      }\n    }\n  };\n\n  return (\n    <div className=\"Chart\">\n      <ChartComponent type=\"line\" data={data} options={options} />\n    </div>\n  )\n}\n","import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport './Login.scss';\nimport { login } from './authSlice';\nimport { Button, TextField } from '@material-ui/core';\n\nexport const Login = () => {\n\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const dispatch = useDispatch();\n\n  const handleSubmit = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n    dispatch(\n      login(btoa(`${username}:${password}`))\n    )\n  }\n\n  return (\n    <div className=\"login-wrapper\">\n      <form onSubmit={handleSubmit}>\n        <TextField label=\"Username\" onChange={(e) => setUsername(e.target.value)} />\n        <TextField type=\"password\" label=\"Password\" onChange={(e) => setPassword(e.target.value)} />\n        <Button type=\"submit\">Login</Button>\n      </form>\n    </div>\n  );\n}\n","import { useDispatch } from 'react-redux';\nimport { Redirect } from 'react-router';\n\nimport { logout } from './authSlice';\n\nexport const Logout = () => {\n\n  const dispatch = useDispatch();\n\n  dispatch(logout());\n\n  return (\n    <Redirect to=\"/\" />\n  );\n}\n","import React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from 'react-router-dom';\nimport { Button, createMuiTheme, CssBaseline, ThemeProvider, useMediaQuery } from '@material-ui/core';\n\nimport './App.scss';\nimport { Filter } from './features/graph/Filter';\nimport { Chart } from './features/graph/Chart';\nimport { Login } from './features/auth/Login';\nimport { AuthState, RootState } from './model/State';\nimport { Logout } from './features/auth/Logout';\n\nfunction App() {\n\n  const [sensor, setSensor] = useState('');\n\n  const auth = useSelector<RootState, AuthState>((state) => state.auth);\n\n  const prefersDarkMode = useMediaQuery('(prefers-color-scheme: dark)');\n\n  const theme = React.useMemo(\n    () =>\n      createMuiTheme({\n        palette: {\n          type: prefersDarkMode ? 'dark' : 'light',\n        },\n      }),\n    [prefersDarkMode],\n  );\n\n\n  if (!auth.loggedIn) {\n    return (\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <Login />\n      </ThemeProvider>\n    )\n  }\n\n  return (\n    <ThemeProvider theme={theme}>\n      <CssBaseline />\n      <Router>\n        <Switch>\n          <Route path=\"/logout\">\n            <Logout />\n          </Route>\n          <Route path=\"/\">\n            <Filter onSensorChange={setSensor} />\n            <Button component={Link} to=\"/logout\">Logout</Button>\n            <Chart sensor={sensor} />\n          </Route>\n        </Switch>\n      </Router>\n    </ThemeProvider>\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\n\nimport authReducer from './features/auth/authSlice';\n\nexport default configureStore({\n  reducer: {\n    auth: authReducer\n  }\n});","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}